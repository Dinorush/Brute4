global function Brute4TitanHasBubbleShieldWeapon
global function Brute4LetTitanPlayerShootThroughBubbleShield
global function CreateParentedBrute4BubbleShield

global function DestroyBrute4BubbleShield
global function CreateBrute4BubbleShieldWithSettings
global function Brute4StopPlayerShootThroughBubbleShield
global function Brute4MonitorLastFireTime
//global function Brute4BubbleShieldSpeedLimit

struct BubbleShieldDamageStruct
{
	float damageFloor
	float damageCeiling
	array<float> quadraticPolynomialCoefficients //Should actually be float[3], but because float[ 3 ] and array<float> are different types and this needs to be fed into EvaluatePolynomial make it an array<float> instead
}

void function CreateParentedBrute4BubbleShield( entity titan, vector origin, vector angles, float duration = 10 )
{
	if ( !IsAlive( titan ) )
		return

	entity soul = titan.GetTitanSoul()
	soul.Signal( "NewBubbleShield" )
	entity bubbleShield = CreateBrute4BubbleShieldWithSettings( titan.GetTeam(), origin, angles, titan, duration )

#if SERVER
	soul.soul.bubbleShield = bubbleShield
	SyncedMelee_Disable( titan )
	// Normally, Dome Shield prevents the user from taking damage. We allow all damage to occur and use a callback to make sure only the damage we want goes through.
	AddEntityCallback_OnDamaged( titan, Brute4BubbleShield_OwnerTakeSpecialDamage )
	
	soul.soul.bubbleShield.SetParent( titan, "ORIGIN" )
	table bubbleshieldDotS = expect table( soul.soul.bubbleShield.s )
	entity vortexColoredFX = expect entity (bubbleshieldDotS.vortexColoredFX )
	vortexColoredFX.SetParent( soul.soul.bubbleShield )

	thread WaitForCleanup(titan, soul, bubbleShield, duration)
#endif
}

void function WaitForCleanup(entity titan, entity soul, entity bubbleShield, float duration)
{
	bubbleShield.EndSignal( "OnDestroy" )
	soul.EndSignal( "OnTitanDeath" )
	soul.EndSignal( "OnDestroy" )
	soul.EndSignal( "TitanBrokeBubbleShield" )

	OnThreadEnd(
		function () : ( titan, soul, bubbleShield )
		{
			CleanupTitanBubbleShieldVars( titan, soul, bubbleShield )
		}
	)
	wait duration
}

void function CleanupTitanBubbleShieldVars( entity titan, entity soul, entity bubbleShield )
{
	DestroyBrute4BubbleShield( bubbleShield )
#if SERVER
	if( IsValid( titan ) )
	{
		SyncedMelee_Enable( titan )
		RemoveEntityCallback_OnDamaged( titan, Brute4BubbleShield_OwnerTakeSpecialDamage )
	}
	if ( IsValid( soul ) )
		soul.soul.bubbleShield = null
#endif
}

void function DestroyBrute4BubbleShield( entity bubbleShield )
{
	if ( IsValid( bubbleShield ) )
	{
#if SERVER
		ClearChildren( bubbleShield )
		bubbleShield.Destroy()
#endif
	}
}

entity function CreateBrute4BubbleShieldWithSettings( int team, vector origin, vector angles, entity owner = null, float duration = 10 )
{
#if SERVER
	
	int health = BRUTE4_DOME_SHIELD_HEALTH
	entity bubbleShield = CreatePropScript( $"models/fx/xo_shield.mdl", origin, angles, SOLID_VPHYSICS )
  	bubbleShield.kv.rendercolor = "81 130 151"
   	bubbleShield.kv.contents = (int(bubbleShield.kv.contents) | CONTENTS_NOGRAPPLE)
	 // Blocks bullets, projectiles but not players and not AI
	bubbleShield.kv.CollisionGroup = TRACE_COLLISION_GROUP_BLOCK_WEAPONS
	bubbleShield.SetMaxHealth( health )
	bubbleShield.SetHealth( health )
	bubbleShield.SetTakeDamageType( DAMAGE_YES )
	bubbleShield.SetBlocksRadiusDamage( false )
	bubbleShield.SetArmorType( ARMOR_TYPE_HEAVY )
	bubbleShield.SetDamageNotifications( true )
	bubbleShield.SetDeathNotifications( true )
	bubbleShield.Hide()

	SetObjectCanBeMeleed( bubbleShield, true )
	SetVisibleEntitiesInConeQueriableEnabled( bubbleShield, true ) // Needed for melee to see it
	SetCustomSmartAmmoTarget( bubbleShield, false )

	SetTeam( bubbleShield, team )
	AddEntityCallback_OnDamaged( bubbleShield, Brute4BubbleShield_TakeBonusMeleeDamage )

	array<entity> bubbleShieldFXs

	vector coloredFXOrigin = origin + Vector( 0, 0, 25 )
	table bubbleShieldDotS = expect table( bubbleShield.s )

	entity vortexColoredFX = StartParticleEffectInWorld_ReturnEntity( BUBBLE_SHIELD_FX_PARTICLE_SYSTEM_INDEX, coloredFXOrigin, <0, 0, 0> )
	bubbleShieldDotS.vortexColoredFX <- vortexColoredFX
	bubbleShieldFXs.append( vortexColoredFX )
	thread Brute4BubbleShield_ColorUpdate( bubbleShield, vortexColoredFX )

	#if MP
	DisableTitanfallForLifetimeOfEntityNearOrigin( bubbleShield, origin, TITANHOTDROP_DISABLE_ENEMY_TITANFALL_RADIUS )
	#endif

	EmitSoundOnEntity( bubbleShield, "BubbleShield_Sustain_Loop" )

	thread CleanupBubbleShield( bubbleShield, bubbleShieldFXs, duration )

	return bubbleShield
#endif
}

#if SERVER
void function Brute4BubbleShield_ColorUpdate( entity bubbleShield, entity colorFXHandle = null )
{
	bubbleShield.EndSignal( "OnDestroy" )

	while( 1 )
	{
		EffectSetControlPointVector( colorFXHandle, 1, GetVortexSphereCurrentColor( 1.0 - GetHealthFrac( bubbleShield ) ) )
		WaitFrame()
	}
}

void function Brute4BubbleShield_OwnerTakeSpecialDamage( entity owner, var damageInfo )
{
	int damageFlags = DamageInfo_GetCustomDamageType( damageInfo )
	int passFlags = DF_RODEO | DF_DOOMED_HEALTH_LOSS | DF_BYPASS_SHIELD
	if ( damageFlags & passFlags )
		return

	// If melees hit the user, we want to pass the damage to dome shield
	if ( damageFlags & DF_MELEE )
	{
		entity bubbleShield = owner.GetTitanSoul().soul.bubbleShield
		if( IsValid( bubbleShield ) )
		{
			entity attacker = DamageInfo_GetAttacker( damageInfo )
			table damageTable =
			{
				scriptType = damageFlags
				forceKill = false
				damageType = DamageInfo_GetDamageType( damageInfo )
				damageSourceId = DamageInfo_GetDamageSourceIdentifier( damageInfo )
				origin = DamageInfo_GetDamagePosition( damageInfo )
			}

			bubbleShield.TakeDamage( DamageInfo_GetDamage( damageInfo ), attacker, attacker, damageTable )
		}
	}

	DamageInfo_SetDamage( damageInfo, 0 )
}

void function Brute4BubbleShield_TakeBonusMeleeDamage( entity bubbleShield, var damageInfo )
{
	if( DamageInfo_GetCustomDamageType( damageInfo ) & DF_MELEE )
		DamageInfo_ScaleDamage( damageInfo, BRUTE4_DOME_SHIELD_MELEE_MOD )

	entity attacker = DamageInfo_GetAttacker( damageInfo )
	if ( bubbleShield.GetTeam() != attacker.GetTeam() && attacker.IsPlayer() )
		attacker.NotifyDidDamage( bubbleShield, DamageInfo_GetHitBox( damageInfo ), DamageInfo_GetDamagePosition( damageInfo ), DamageInfo_GetCustomDamageType( damageInfo ), DamageInfo_GetDamage( damageInfo ), DamageInfo_GetDamageFlags( damageInfo ), DamageInfo_GetHitGroup( damageInfo ), DamageInfo_GetWeapon( damageInfo ), DamageInfo_GetDistFromAttackOrigin( damageInfo ) )
}
#endif

void function CleanupBubbleShield( entity bubbleShield, array<entity> bubbleShieldFXs, float fadeTime )
{
#if SERVER
	bubbleShield.EndSignal( "OnDestroy" )

	OnThreadEnd(
		function () : ( bubbleShield, bubbleShieldFXs )
		{
			if ( IsValid_ThisFrame( bubbleShield ) )
			{
				StopSoundOnEntity( bubbleShield, "BubbleShield_Sustain_Loop" )
				EmitSoundOnEntity( bubbleShield, "BubbleShield_End" )
				DestroyBrute4BubbleShield( bubbleShield )
			}

			foreach ( fx in bubbleShieldFXs )
			{
				if ( IsValid_ThisFrame( fx ) )
				{
					EffectStop( fx )
				}
			}
		}
	)

	wait fadeTime
#endif
}

void function Brute4LetTitanPlayerShootThroughBubbleShield( entity titanPlayer, entity weapon )
{
#if SERVER
	Assert( titanPlayer.IsTitan() )

	entity soul = titanPlayer.GetTitanSoul()

	entity bubbleShield = soul.soul.bubbleShield


	if ( !IsValid( bubbleShield ) )
		return

	bubbleShield.SetOwner( titanPlayer ) //After this, player is able to fire out from shield. WATCH OUT FOR POTENTIAL COLLISION BUGS!

	thread Brute4MonitorMovement( titanPlayer, bubbleShield )
	thread Brute4MonitorLastFireTime( weapon, titanPlayer, bubbleShield )
	thread Brute4StopPlayerShootThroughBubbleShield( titanPlayer, bubbleShield )
#endif
}

void function Brute4StopPlayerShootThroughBubbleShield( entity player, entity bubbleShield )
{
#if SERVER
	player.EndSignal( "OnDeath" )
	bubbleShield.EndSignal("OnDestroy")
	player.WaitSignal( "OnChangedPlayerClass" ) //Kill this thread once player gets out of the Titan

	if ( !IsValid( bubbleShield ) )
		return

	bubbleShield.SetOwner( null )
#endif
}

void function Brute4MonitorLastFireTime( entity weapon, entity player, entity bubbleShield )
{
#if SERVER
	player.EndSignal( "OnDestroy" )
	bubbleShield.EndSignal("OnDestroy")
	entity soul = player.GetTitanSoul()

	WaitSignal( player, "DisembarkingTitan", "OnSyncedMelee", "KillBruteShield", "OnMelee" ) //Sent when player fires his weapon/disembarks

	if ( !IsValid( soul ) )
		return

	soul.Signal( "TitanBrokeBubbleShield" ) //WaitUntilShieldFades will end when this signal is sent
#endif
}

void function Brute4MonitorMovement( entity player, entity bubbleShield )
{
	#if SERVER
	player.EndSignal( "OnDestroy" )
	bubbleShield.EndSignal("OnDestroy")

	float lastDodgePower = player.GetDodgePower()
	while( player.GetDodgePower() >= lastDodgePower )
	{
		lastDodgePower = player.GetDodgePower()
		WaitFrame()
	}

	entity soul = player.GetTitanSoul()
	if ( !IsValid( soul ) )
		return

	soul.Signal( "TitanBrokeBubbleShield" ) //WaitUntilShieldFades will end when this signal is sent
	#endif
}

bool function Brute4TitanHasBubbleShieldWeapon( entity titan )
{
#if SERVER
	entity weapon = titan.GetActiveWeapon()
	if ( IsValid( weapon ) && IsValid( weapon.w.bubbleShield ) )
		return true
#endif
	return false
}